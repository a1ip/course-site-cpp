Контрольная по С++
##################

:date: 2016-10-27 12:10

.. default-role:: code
.. contents:: Содержание

Контрольная работа по С++ (27 ноября 2016 г.)
=============================================

Вариант 1
---------

1. Используя библиотеку <cstring> определить класс `Symbol` с инкапсулированным указателем типа `char *`. В классе `Symbol` определить параметризованный конструктор, распределяющий динамическую память под массив переменных типа char размера 80 и инициализирующий его, и деструктор, освобождающий динамическую память.

2. Определить класс Complex, открыто (public) наследующий класс `Symbol`, с двумя инкапсулированными переменными типа double (объекты класса `Complex` представляют комплексные числа). В классе `Complex` определить конструктор с тремя параметрами: двумя параметрами типа `double` и одним параметром типа `char *`. В классе Complex перегрузить оператор прибавления (+=) в соответствии с правилами сложения комплексных чисел (содержимое класса `Symbol` при этом не изменяется). В `main()` определить указатели типа `Complex *` и создать объекты Complex в динамической памяти. Привести пример вызова оператора прибавления, перегруженного в классе Complex. Реализовать функцию `Show()` для вывода значений трех переменных класса `Complex`.


Вариант 2
---------

1. Используя библиотеку <cstring> определить класс `Key` с инкапсулированной строкой длиной 80 байт. В классе Key определить параметризованный конструктор, инициализирующий строку.

2. Определить класс `Dictionary`, открыто (public) наследующий класс `Key`, с инкапсулированным указателем типа `char *`. В классе `Dictionary` определить параметризованный конструктор с двумя параметрами: типа `char *` и типа `char[]`, распределяющий динамическую память под указываемую строку и инициализирующий ее, и деструктор, освобождающий динамическую память.
В классе `Dictionary` перегрузить оператор прибавления(+=), проверяющий совпадение в складываемых объектах строк длиной 80 байт, инкапсулированных в классе `Key` (в противном случае вызывающий объект остается без изменения), и реализующую соединение строк, указываемых в классе `Dictionary` (содержимое класса Key при этом не изменяется). В `main()` определить указатели типа `Dictionary *` и создать объекты `Dictionary` в динамической памяти. Привести пример вызова оператора прибавления, перегруженного в классе `Dictionary`. Реализовать функцию `Show()` для вывода значений двух переменных класса `Dictionary`.

Вариант 3
---------

1. Определить класс `Point2D` с двумя инкапсулированными указателями типа `double *`. В классе `Point2D` определить параметризованный конструктор, распределяющий динамическую память под две переменные типа double и инициализирующий их, и деструктор, освобождающий динамическую память.

2. Определить класс `Vector2D`, открыто (public) наследующий класс `Point2D` (объекты класса `Vector2D` представляют двумерные вектора). В классе `Vector2D` определить конструктор с двумя параметра типа double. В классе `Vector2D` перегрузить оператор прибавления (+=) в соответствии с правилами сложения двумерных векторов (содержимое класса Point2D при этом не изменяется). В `main()` определить указатели типа `Vector2D *` и создать объекты `Vector2D` в динамической памяти. Привести пример вызова оператора прибавления, перегруженного в классе `Vector2D`. Реализовать функцию `Show()` для вывода значений двух переменных класса `Vector2D`.