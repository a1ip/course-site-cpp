Передача параметров в функции   
#############################

:date: 2016-09-15 09:00
:status: draft

.. default-role:: code
.. contents:: Содержание

	
Функции с параметрами в С++
===========================

Исходные данные функция должена получать из своих параметров.
Список параметров в заголовке функции называется *список формальных параметров*.

Параметр функции — это принятый функцией аргумент, значение, переданное из вызывающего кода.

Различают:

* фактический параметр — что именно передали в функцию при её вызове (в частности, на этапе выполнения программы);
* формальный параметр — аргумент, указываемый при объявлении и определении функции.

Пример функции с одним параметром:
 
.. code-block:: c

	// Объявление функции. int a - формальный параметр, имя параметра может отсутствовать.
	int myfunction(int a);
	 
	// Определение функции. int b - формальный параметр, имя параметра может не совпадать с указанным при объявлении функции.
	int myfunction(int b)
	{
	   return 0;
	}
	 
	int main()
	{
		int c=0;
		myfunction(c); // Вызов функции. c - фактический параметр.
		return 0;
	}

Передача параметра по значению
------------------------------

Параметры в С++ передаются по значению, то есть вызывающая функция копирует в память, доступную вызываемой функции (сегмент стека), непосредственное фактическое значение.

Изменение копии переменной, соответственно, оригинал не затрагивает!

Передача параметра по адресу
----------------------------

Если необходимо именно изменить переменную из внешней, по отношению к вызываемой функции, области видимости, можно копировать адрес переменной, подлежащей изменению. Соответственно при вызове функции `g(&x)` приходится использовать операцию взятия адреса.

Можно заметить, что передача параметра по адресу является частным случаем передачи по значению: передаваемым значением является адрес, по которому можно найти другое значение — значение переменной `x`.

const параметры адресных типов
==============================


Прототипы функций
=================

**Определение функции** содержит как *заголовок*, так и *тело функции*:

Благодаря принципу *раздельной компиляции*, на самом этапе компиляции *не требуется тело функции* — достаточно только заголовка.

**Прототипом** функции в языке Си или C++ называется *объявление функции*, не содержащее тела функции, но указывающее:

* имя функции,
* количество аргументов (арность),
* типы аргументов,
* возвращаемый тип данных.

В то время как определение функции описывает, *что именно* делает функция, прототип функции — это описание её *интерфейса*.

.. code-block:: c

	double new_style(int a, double *x); /* прототип функции */

Обратите внимание на точку с запятой после закрывающей круглой скобки. Она значит, что тела функции тут не предполагается.

В прототипе имена аргументов являются необязательными, тем не менее, необходимо указывать тип вместе со всеми модификаторами (например, если это указатель или константный аргумент):

.. code-block:: c

	double alt_style(int, double *); /* альтернативная форма прототипа */

На этапе компоновки тело функции всё-таки понадобится, иначе программу не удастся собрать.


Двумерные массивы в С++
=======================


Динамические двумерные массивы в С++
====================================


